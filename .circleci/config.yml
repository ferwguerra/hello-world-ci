version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@0.0.4
  aws-ecs: circleci/aws-ecs@0.0.10

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: ferwguerra/hello-world
    docker:
      - image: circleci/openjdk:8-jdk
      - image: circleci/buildpack-deps:stretch

jobs:
  build:
    executor: docker-publisher
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - run:
          name: Maven Dependencies
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Running application tests
          command: mvn integration-test

      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:latest .

      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME

      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest


workflows:
  version: 2
  build-master:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - publish-latest:
          requires:
            - build
          filters:
            branches:
              only: master
      - aws-ecr/build_and_push_image:
          account-url: '${AWS_ECR_ACCOUNT_URL}'
          repo: '${AWS_ECR_REPO}'
          region: '${AWS_REGION}'
          tag: '${AWS_ECR_TAG}'
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build_and_push_image
          aws-region: '${AWS_REGION}'
          cluster-name: 'app-cluster'
          family: 'app-task-definition-fargate'
          service-name: 'app-service-fargate'
          container-image-name-updates: 'container=app-container,tag=app'